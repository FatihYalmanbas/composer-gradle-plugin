apply plugin: "java-gradle-plugin"
apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "maven-publish"
apply plugin: "com.gradle.plugin-publish"
apply plugin: "com.trevjonez.adb-uninstall"

ext.artifactId = "plugin"

gradlePlugin {
    plugins {
        create("composer") {
            displayName = "com.trevjonez.composer"
            description = "Gradle task type and plugin for interacting with https://github.com/gojuno/composer"
            id = "com.trevjonez.composer"
            implementationClass = "com.trevjonez.composer.ComposerPlugin"
        }
    }
}

pluginBundle {
    website = "https://github.com/trevjonez/composer-gradle-plugin"
    vcsUrl = "https://github.com/trevjonez/composer-gradle-plugin.git"
    tags = ["android", "composer", "test", "orchestrator", "report"]
}

dependencies {
    api("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    api("com.android.tools.build:gradle:$AGP_VERSION")
    api(gradleApi())

    testImplementation(gradleTestKit())
    testImplementation("junit:junit:4.12")
    testImplementation("org.assertj:assertj-core:3.5.2")
    testImplementation("commons-io:commons-io:2.5")
    testImplementation("org.jetbrains.kotlin:kotlin-reflect")
}

adbUninstall {
    packageNames.addAll(
            "com.trevjonez.andapp",
            "com.trevjonez.andapp.test",

            "com.trevjonez.anddyn",
            "com.trevjonez.anddyn.test",
            "com.trevjonez.atinstall.test",

            "com.trevjonez.andlib.test",

            "com.trevjonez.testapp",
            "com.trevjonez.testapp.test",
    )
}

tasks.named("test", Test.class) {
    systemProperty("buildDir", buildDir.absolutePath)
    systemProperty("andApp", rootProject.file("and-app").absolutePath)
    systemProperty("andLib", rootProject.file("and-lib").absolutePath)
    systemProperty("andDyn", rootProject.file("and-dyn").absolutePath)
    systemProperty("andTest", rootProject.file("and-test").absolutePath)
    systemProperty("org.gradle.testkit.debug", false)

    outputs.dir("$buildDir/tests")
    outputs.dir(rootProject.file("and-app/build"))
    outputs.dir(rootProject.file("and-lib/build"))
    outputs.dir(rootProject.file("and-dyn/build"))
    outputs.dir(rootProject.file("and-dyn/base/build"))
    outputs.dir(rootProject.file("and-dyn/atInstall/build"))

    inputs.files("gradle.properties")

    inputs.dir(rootProject.file("and-app/src"))
    inputs.files(
            rootProject.file("and-app/build.gradle"),
            rootProject.file("and-app/build-cascade-dsl.gradle"),
            rootProject.file("and-app/build-custom-task.gradle"),
            rootProject.file("and-app/settings.gradle")
    )

    inputs.dir(rootProject.file("and-lib/src"))
    inputs.files(
            rootProject.file("and-lib/build.gradle"),
            rootProject.file("and-lib/settings.gradle")
    )

    inputs.dir(rootProject.file("and-dyn/base/src"))
    inputs.dir(rootProject.file("and-dyn/atInstall/src"))
    inputs.files(
            rootProject.file("and-dyn/build.gradle"),
            rootProject.file("and-dyn/settings.gradle"),
            rootProject.file("and-dyn/base/build.gradle"),
            rootProject.file("and-dyn/atInstall/build.gradle")
    )

    inputs.dir(rootProject.file("and-test/app/src"))
    inputs.dir(rootProject.file("and-test/test/src"))
    inputs.files(
            rootProject.file("and-test/app/build.gradle"),
            rootProject.file("and-test/test/build.gradle"),
            rootProject.file("and-test/build.gradle"),
            rootProject.file("and-test/settings.gradle")
    )

    inputs.dir(rootProject.file("commander/os/src/main"))
    inputs.dir(rootProject.file("commander/android/src/main"))
    inputs.dir(rootProject.file("composer/composer/src/main"))
    inputs.dir(rootProject.file("composer/html-report"))
    inputs.files(
            rootProject.file("commander/os/build.gradle"),
            rootProject.file("commander/android/build.gradle"),
            rootProject.file("composer/composer/build.gradle")
    )

    dependsOn(":composer:publishToMavenLocal")
    dependsOn(":commander:os:publishToMavenLocal")
    dependsOn(":commander:android:publishToMavenLocal")
}

def sourcesJar = tasks.register("sourcesJar", Jar) {
    classifier = "sources"
    from(sourceSets["main"].allSource)
    dependsOn(sourceSets["main"].classesTaskName)
}

publishing {
    publications {
        register("plugin", MavenPublication) {
            from(components["java"])
            artifact(sourcesJar.get())

            pom {
                inceptionYear.set("2017")
                licenses {
                    license {
                        name.set("The Apache Software License, Version 2.0")
                        url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                        distribution.set("repo")
                    }
                }
            }
        }
    }
}